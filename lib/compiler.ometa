// -- The compiler for KyuS --------------------------------------------
ometa KyuSCompiler {
  evMap = [#field eval:n eval:v] -> makeField(n, v),

  eval = [#id :a]                                    -> sanitise(a)
       | [#num :a]                                   -> a
       | [#str :a]                                   -> makeString(a)
       | [#vector [eval*:as]]                        -> makeVector(as)
       | [#map [evMap*:as]]                          -> makeMap(as)
       | [#lambda [#args [eval*:as]] [eval*:body]]   -> makeLambda(as, body)
       | [#return eval:v]                            -> makeReturn(v)
       | [#call eval:hd [eval*:as]]                  -> makeCall(hd, as)
       | [#let eval:n eval:v]                        -> makeLet(n, v),

  cc = [eval*:as] -> as.join(';\n')
}

module.exports = KyuSCompiler

// :: { String -> String }
var SymbolTable = {
  '=': 'EQUAL'
, '-': 'MINUS'
, '+': 'PLUS'
, '/': 'SLASH'
, '!': 'BANG'
, '?': 'QUESTION'
, '~': 'TILDE'
, '@': 'AT'
, '^': 'CIRCUMFLEX'
, '<': 'LT'
, '>': 'GT'
, '#': 'POUND'
, '$': 'DOLLAR'
, '%': 'PERCENT'
, '&': 'AND'
, '*': 'TIMES'
}

// :: String -> String
function sanitise(a) { 
  return a.replace(/([^\w\._])/g, function(x) {
    return '$' + (SymbolTable[x] || x.charCodeAt(0)) })}

// :: String -> String
function makeString(a) { 
  return '"' 
       + a.replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/"/g, '\\"') 
       + '"' }

// :: [String] -> String
function makeVector(as) {
  return '[' + as.join(', ') + ']' }

// :: [String] -> String
function makeMap(as) { 
  return '{' + as.join(', ') + '}' }

// :: String, String -> String
function makeField(n, v) { 
  return '"' + n + '": ' + v }

// :: [String], [String] -> String
function makeLambda(as, b) {
  var last = b.pop()
  var init = b.join(';\n')
  last && (last = 'return ' + last)
  init && (init += ';')
  return '(function(' + as.join(', ') + '){\n' + init + last + '\n})' }

// :: String -> String
function makeReturn(v) {
  return 'return ' + v }

// :: String, [String] -> String
function makeCall(n, as) {
  return '(' + n + ')(' + as.join(', ') + ')' }

// :: String, String -> String
function makeLet(n, v) {
  return 'var ' + n + ' = ' + v }
